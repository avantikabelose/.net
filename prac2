→ BlogPost.cs
Code :
namespace SimpleBlog.Models
{
    public class BlogPost
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; } = DateTime.Now;
    }
}

BlogService.cs:
Code :
using SimpleBlog.Models;
using System.Collections.Generic;
using System.Linq;

namespace SimpleBlog.Services
{
    public class BlogService
    {
        private readonly List<BlogPost> _posts = new List<BlogPost>();
        private int _nextId = 1;

        public BlogService()
        {
            _posts.Add(new BlogPost { Id = _nextId++, Title = "Welcome to My Blog", Content = "This is the first blog post." });
        }

        public List<BlogPost> GetAll() => _posts.OrderByDescending(p => p.CreatedAt).ToList();

        public BlogPost? Get(int id) => _posts.FirstOrDefault(p => p.Id == id);

        public void Add(BlogPost post)
        {
            post.Id = _nextId++;
            post.CreatedAt = DateTime.Now;
            _posts.Add(post);
        }

        public bool Update(BlogPost post)
        {
            var existing = Get(post.Id);
            if (existing == null) return false;

            existing.Title = post.Title;
            existing.Content = post.Content;
            return true;
        }
    }
}



Program.cs
Code :
using SimpleBlog.Services;

var builder = WebApplication.CreateBuilder(args);

// Add MVC and singleton service
builder.Services.AddControllersWithViews();
builder.Services.AddSingleton<BlogService>();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
}
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

// Default route
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Blog}/{action=Index}/{id?}");

app.Run();


→ BlogController.
2.	Paste:
Code :
using Microsoft.AspNetCore.Mvc;
using SimpleBlog.Models;
using SimpleBlog.Services;

namespace SimpleBlog.Controllers
{
    public class BlogController : Controller
    {
        private readonly BlogService _service;
        public BlogController(BlogService service) => _service = service;

        // GET: /Blog
        public IActionResult Index()
        {
            var posts = _service.GetAll();
            return View(posts);
        }

        // GET: /Blog/Details/1
        public IActionResult Details(int id)
        {
            var post = _service.Get(id);
            if (post == null) return NotFound();
            return View(post);
        }

        // GET: /Blog/Create
        public IActionResult Create() => View();

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(BlogPost post)
        {
            if (!ModelState.IsValid) return View(post);
            _service.Add(post);
            return RedirectToAction(nameof(Index));
        }

        // GET: /Blog/Edit/1
        public IActionResult Edit(int id)
        {
            var post = _service.Get(id);
            if (post == null) return NotFound();
            return View(post);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(BlogPost post)
        {
            if (!ModelState.IsValid) return View(post);
            _service.Update(post);
            return RedirectToAction(nameof(Index));
        }
    }
}
